# 虽然 Sentry 的许多配置可以通过 UI 进行更改，但对于所有
# 新式配置（从 8.0 开始），您也可以在此文件中声明值
# 以强制执行默认值或确保它们无法通过 UI 更改。更多
# 信息请参阅 Sentry 文档。

###############
# 邮件服务器 #
###############

# mail.backend: 'smtp'  # 如果您想完全禁用电子邮件，请使用 dummy
mail.host: 'smtp'
# mail.port: 25
# mail.username: ''
# mail.password: ''
# 注意：`mail.use-tls` 和 `mail.use-ssl` 是互斥的，不应该
#        同时出现。只能取消注释其中一个。
# mail.use-tls: false
# mail.use-ssl: false

# 注意：以下 2 个配置（mail.from 和 mail.list-namespace）是通过
#       sentry.conf.py 中的 SENTRY_MAIL_HOST 设置的，如果您希望此文件中的值生效，
#       请先删除那些配置！

# 代表发送的电子邮件地址
# mail.from: 'root@localhost' or ...
# mail.from: 'System Administrator <root@localhost>'

# 此 Sentry 服务器发送的电子邮件的邮件列表命名空间。
# 这应该是您拥有的域名（通常与 `mail.from` 配置参数值的域名部分相同）或 `localhost`。
# mail.list-namespace: 'localhost'

# 如果您想配置电子邮件回复，请启用此选项。
# mail.enable-replies: true

# 当启用电子邮件回复时，此值用于 Reply-To 标头
# mail.reply-hostname: ''

# 如果您使用 mailgun 处理入站邮件，请设置您的 API 密钥并配置
# 路由转发到 /api/hooks/mailgun/inbound/
# 另外不要忘记在上面设置 `mail.enable-replies: true`。
# mail.mailgun-api-key: ''

###################
# 系统设置 #
###################

# 这是可以访问 Sentry 的主要 URL 前缀。
# Sentry 将使用此前缀创建指向其 Web UI 不同部分的链接。
# 如果您使用外部反向代理，这最有用。
# system.url-prefix: https://example.sentry.com

# 大多数情况下，这不应该被更改。它用于容器之间的通信。
# `web` 是容器的名称，`9000` 是 Sentry 后端打开的默认端口（这不是公共端口）。
#
# 如果您想更改公开暴露的域名或端口，您应该更改上面的 `system.url-prefix`，
# 以及 `.env` 文件中的 `SENTRY_BIND`。
# 另请参阅 https://develop.sentry.dev/self-hosted/#productionalizing。
system.internal-url-prefix: 'http://web:9000'

# 如果此文件曾经被泄露，生成新密钥很重要。
# 更改此值将导致所有当前会话失效。
# 可以使用 `$ sentry config generate-secret-key` 生成新密钥
#
# 如果您在 `.env` 或 `.env.custom` 文件中使用 SENTRY_SYSTEM_SECRET_KEY，
# 您应该删除下面这行，因为它不会被使用。
system.secret-key: '!!changeme!!'

# ``redis.clusters`` 设置用于配置 Redis 集群，这并不奇怪。
# 在配置缓存、摘要或 TSDB 后端等后端时，可以按名称引用这些集群。
# redis.clusters:
#   default:
#     hosts:
#       0:
#         host: 127.0.0.1
#         port: 6379

################
# 文件存储 #
################

# 上传的媒体使用这些 `filestore` 设置。可用的
# 后端是 `filesystem` 或 `s3`。

filestore.backend: 'filesystem'
filestore.options:
  location: '/data/files'
dsym.cache-path: '/data/dsym-cache'
releasefile.cache-path: '/data/releasefile-cache'

# filestore.backend: 's3'
# filestore.options:
#   access_key: 'AKIXXXXXX'
#   secret_key: 'XXXXXXX'
#   bucket_name: 's3-bucket-name'

symbolicator.enabled: true
symbolicator.options:
  url: "http://symbolicator:3021"

transaction-events.force-disable-internal-project: true

######################
# GitHub 集成 #
######################

# 有关设置说明，请参阅 https://develop.sentry.dev/integrations/github/。

# github-login.extended-permissions: ['repo']
# github-app.id: GITHUB_APP_ID
# github-app.name: 'GITHUB_APP_NAME'
# github-app.webhook-secret: 'GITHUB_WEBHOOK_SECRET' # 仅在 GitHub 中配置时使用
# github-app.client-id: 'GITHUB_CLIENT_ID'
# github-app.client-secret: 'GITHUB_CLIENT_SECRET'
# github-app.private-key: |
#   -----BEGIN RSA PRIVATE KEY-----
#   privatekeyprivatekeyprivatekeyprivatekey
#   privatekeyprivatekeyprivatekeyprivatekey
#   privatekeyprivatekeyprivatekeyprivatekey
#   privatekeyprivatekeyprivatekeyprivatekey
#   privatekeyprivatekeyprivatekeyprivatekey
#   -----END RSA PRIVATE KEY-----

#####################
# Slack 集成 #
#####################

# 有关设置说明，请参阅 https://develop.sentry.dev/integrations/slack/。

# slack.client-id: <'client id'>
# slack.client-secret: <client secret>
# slack.signing-secret: <signing secret>
## 如果 legacy-app 为 True，请使用 verification-token 而不是 signing-secret
# slack.verification-token: <verification token>


#######################
# Discord 集成 #
#######################

# 请参阅 https://develop.sentry.dev/integrations/discord/

# discord.application-id: "<application id>"
# discord.public-key: "<public key>"
# discord.client-secret: "<client secret>"
# discord.bot-token: "<bot token>"

###############
# Google 认证 #
###############

# 请参阅 https://develop.sentry.dev/self-hosted/sso/#google-auth

# auth-google.client-id: "<client id>"
# auth-google.client-secret: "<client secret>"
